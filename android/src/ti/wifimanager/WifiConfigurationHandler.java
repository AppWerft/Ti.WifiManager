/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.wifimanager;

import java.util.Arrays;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;

import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.net.wifi.WifiEnterpriseConfig;
import android.net.wifi.WifiManager;

public class WifiConfigurationHandler {
	private static final String LCAT = WifimanagerModule.LCAT;
	private static WifiConfiguration wifiConfig = new WifiConfiguration();;
	private static String bssid;
	private static String ssid;
	private static String name;
	private static String password;

	private static boolean persist = true;
	private static String security;
	private static String[] securities = { "PSK", "WEP", "EAP", "Open" };
	private static boolean VERBOSE = false;
	private static WifiManager wifi;

	public WifiConfigurationHandler() {
		super();
	}

	public static int addNetwork(KrollDict opts) {
		wifi = WifimanagerModule.wifiManager;
		if (wifi.isWifiEnabled() == false) {
			wifi.setWifiEnabled(true);
		}
		if (opts.containsKeyAndNotNull("bssid")) {
			bssid = (Utils.isValidMac(opts.getString("bssid"))) ? opts
					.getString("bssid") : null;
			wifiConfig.BSSID = StringUtils.addQuotes(bssid);
		}
		if (opts.containsKeyAndNotNull("security")) {
			security = (Utils.isValidSecurity(opts.getString("security"))) ? opts
					.getString("security") : null;
			if (!Arrays.asList(securities).contains(security))
				security = null;
		}
		if (opts.containsKeyAndNotNull("ssid")) {
			ssid = opts.getString("ssid");
		}
		if (opts.containsKeyAndNotNull("password")) {
			password = opts.getString("password");
		}

		if (opts.containsKeyAndNotNull("persist")) {
			persist = opts.getBoolean("persist");
		}
		if (opts.containsKeyAndNotNull("psk")) {
			password = opts.getString("psk");
		}
		if (opts.containsKeyAndNotNull("secret")) {
			password = opts.getString("secret");
		}
		if (opts.containsKeyAndNotNull("preSharedKey")) {
			password = opts.getString("preSharedKey");
		}
		if (bssid != null || ssid != null) {
			return createWifiConfigurationAndAdd();
		} else {
			Log.e(LCAT, "bssid/ssid was invalid");
			return -2;
		}
	}

	@Kroll.method
	public boolean isValidWEPKey(String wepKey) {
		return WEPKey.isValid(wepKey);
	}

	@Kroll.method
	public boolean isValidMac(String mac) {
		return Utils.isValidMac(mac);
	}

	@Kroll.method
	public String getApiName() {
		return "ti.wifimanager.WifiConfigurationProxy";
	}

	private static String getSecurityOfBSSID(String bssid) {
		for (android.net.wifi.ScanResult scanResult : WifimanagerModule.wifiManager
				.getScanResults()) {
			if (scanResult.BSSID.equals(bssid)) {
				return Utils.getScanResultSecurity(scanResult);
			}
		}
		return null;
	}

	private static String getSecurityOfSSID(String ssid) {
		for (android.net.wifi.ScanResult scanResult : WifimanagerModule.wifiManager
				.getScanResults()) {
			if (scanResult.SSID.equals(ssid)) {
				return Utils.getScanResultSecurity(scanResult);
			}
		}
		return null;
	}

	private static int createWifiConfigurationAndAdd() {
		if (security == null && bssid != null)
			security = getSecurityOfBSSID(bssid);
		if (security == null && ssid != null)
			security = getSecurityOfSSID(ssid);
		Log.d(LCAT, "security: " + security);
		// Utils.hasPermission(android.Manifest.permission.OVERRIDE_WIFI_CONFIG);
		switch (security) {
		case WifimanagerModule.WEP:
			Log.d(LCAT,
					"Security WEP, settimng your password to first of wepKey");
			// test if secret is 10,26 or 59 digit key
			wifiConfig.wepKeys[0] = "\"" + password + "\"";
			wifiConfig.wepTxKeyIndex = 0;
			wifiConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
			wifiConfig.allowedGroupCiphers
					.set(WifiConfiguration.GroupCipher.WEP40);
			break;
		case WifimanagerModule.EAP:
			Log.d(LCAT, "Security EAP");
			WifiEnterpriseConfig enterpriseConfig = new WifiEnterpriseConfig();
			wifiConfig.allowedKeyManagement.set(KeyMgmt.WPA_EAP);
			wifiConfig.allowedKeyManagement.set(KeyMgmt.IEEE8021X);
			if (name != null)
				enterpriseConfig.setIdentity(name);
			if (password != null)
				enterpriseConfig.setPassword(password);
			enterpriseConfig.setEapMethod(WifiEnterpriseConfig.Eap.PEAP);
			wifiConfig.enterpriseConfig = enterpriseConfig;
			break;
		case WifimanagerModule.OPEN:
			wifiConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
			break;
		case WifimanagerModule.PSK:

			// PSK management:
			if (password.length() < 8) {
				Log.e(LCAT, "PSK too short, min 8 characters");
				return -2;
			}
			wifiConfig.preSharedKey = StringUtils.addQuotes(password);
			Log.d(LCAT,
					"setting preSharedKey to "
							+ StringUtils.addQuotes(password));
			// BSSID management
			if (bssid != null) {
				Log.d(LCAT, "setting bssid to " + wifiConfig.BSSID);
				wifiConfig.BSSID = StringUtils.addQuotes(bssid);
			}
			// SSID management
			if (ssid != null) {
				Log.d(LCAT, "setting ssid to " + wifiConfig.SSID);
				wifiConfig.SSID = StringUtils.addQuotes(ssid);
			}

			// wifiConfig.hiddenSSID = false;
			// wifiConfig.status = WifiConfiguration.Status.ENABLED;
			if (VERBOSE) {
				wifiConfig.allowedAuthAlgorithms.clear();
				wifiConfig.allowedGroupCiphers.clear();
				wifiConfig.allowedKeyManagement.clear();
				wifiConfig.allowedPairwiseCiphers.clear();
				wifiConfig.allowedProtocols.clear();

				wifiConfig.allowedAuthAlgorithms
						.set(WifiConfiguration.AuthAlgorithm.OPEN);

				wifiConfig.allowedGroupCiphers
						.set(WifiConfiguration.GroupCipher.TKIP);

				wifiConfig.allowedGroupCiphers
						.set(WifiConfiguration.GroupCipher.CCMP);

				wifiConfig.allowedKeyManagement
						.set(WifiConfiguration.KeyMgmt.WPA_PSK);

				wifiConfig.allowedPairwiseCiphers
						.set(WifiConfiguration.PairwiseCipher.TKIP);

				wifiConfig.allowedPairwiseCiphers
						.set(WifiConfiguration.PairwiseCipher.CCMP);

				wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
				wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.RSN);
			}
			int id = -1;
			if (wifi.isWifiEnabled()) {
				Log.d(LCAT,
						"Wifi is enabled, pingSupplicant="
								+ wifi.pingSupplicant());
				Log.d(LCAT, wifiConfig.toString());
				try {
					id = wifi.addNetwork(wifiConfig);
				} catch (NullPointerException e) {
					Log.e(LCAT, "Weird!! Really!! What's wrong??", e);
					// Weird!! Really!!
					// This exception is reported by user to Android Developer
					// Console(https://market.android.com/publish/Home)
				}
			} else
				Log.e(LCAT, "Cannot add network because wifi is disabled");
			Log.d(LCAT, "id=" + id + "\n\n");
			if (persist) {
				Log.d(LCAT, " new WifiConfiguration will saved");
				wifi.saveConfiguration();
			}
			return id;
		default:
		}
		return -2;
	}
}
// http://stackoverflow.com/questions/8392747/setup-wifi-programatically-using-wpa-security-in-android-tablet
// http://stackoverflow.com/questions/9871762/android-turning-on-wifi-programmatically
// http://stackoverflow.com/questions/12016918/android-wifimanager-addnetwork-returns-1
// http://stackoverflow.com/questions/32120710/how-to-connect-to-wifi-with-a-specific-bssid-android