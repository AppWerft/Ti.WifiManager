/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.wifimanager;

import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.content.Context;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiConfiguration.KeyMgmt;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiEnterpriseConfig;
import android.net.wifi.WifiManager;
import android.os.Build;

@Kroll.proxy(creatableInModule = WifimanagerModule.class)
public class WifiConfigurationProxy extends KrollProxy {
	private static final String LCAT = WifimanagerModule.LCAT;
	public WifiConfiguration wc = new WifiConfiguration();;
	private String bssid;
	private String ssid;
	private String name;
	private String password;
	private int priority = 2;
	private String security;
	private Context ctx = TiApplication.getInstance().getApplicationContext();
	private String[] securities = { "PSK", "WEP", "EAP", "Open" };

	public WifiConfigurationProxy() {
		super();
	}

	public WifiConfiguration getConfiguration() {
		return this.wc;
	}

	@Override
	public void handleCreationDict(
			@Kroll.argument(optional = true) KrollDict opts) {
		super.handleCreationDict(opts);
		if (opts.containsKeyAndNotNull("bssid")) {
			bssid = (Utils.isValidMac(opts.getString("bssid"))) ? opts
					.getString("bssid") : null;
			Log.d(LCAT, "bssid=" + bssid);
		}
		if (opts.containsKeyAndNotNull("security")) {
			security = (Utils.isValidSecurity(opts.getString("security"))) ? opts
					.getString("security") : null;
			if (!Arrays.asList(securities).contains(security))
				security = null;
		}
		if (opts.containsKeyAndNotNull("ssid")) {
			ssid = opts.getString("ssid");
		}
		if (opts.containsKeyAndNotNull("password")) {
			password = opts.getString("password");
		}
		if (opts.containsKeyAndNotNull("priority")) {
			priority = opts.getInt("priority");
		}
		if (opts.containsKeyAndNotNull("psk")) {
			password = opts.getString("psk");
		}
		if (opts.containsKeyAndNotNull("secret")) {
			password = opts.getString("secret");
		}
		if (opts.containsKeyAndNotNull("preSharedKey")) {
			password = opts.getString("preSharedKey");
		}
		if (bssid != null) {
			createWifiConfiguration();
		} else
			Log.e(LCAT, "bssid was invalid");

	}

	@Kroll.method
	public boolean isValidWEPKey(String wepKey) {
		return WEPKey.isValid(wepKey);
	}

	@Kroll.method
	public boolean isValidMac(String mac) {
		return Utils.isValidMac(mac);
	}

	@Kroll.method
	public String getApiName() {
		return "ti.wifimanager.WifiConfigurationProxy";
	}

	private void createWifiConfiguration() {
		Log.d(LCAT,
				"try to createConfByBBSID, iterating thru all scanned results. Count="
						+ WifimanagerModule.wifiManager.getScanResults().size());
		for (android.net.wifi.ScanResult scanResult : WifimanagerModule.wifiManager
				.getScanResults()) {
			if (scanResult.BSSID.equals(bssid)) {
				Log.d(LCAT, "BSSID found, create new empty configuration");
				wc.BSSID = String.format("\"%s\"", bssid);

				switch (Utils.getScanResultSecurity(scanResult)) {
				case WifimanagerModule.WEP:
					Log.d(LCAT,
							"Security WEP, settimng your password to first of wepKey");
					// test if secret is 10,26 or 59 digit key
					wc.wepKeys[0] = "\"" + password + "\"";
					wc.wepTxKeyIndex = 0;
					wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
					wc.allowedGroupCiphers
							.set(WifiConfiguration.GroupCipher.WEP40);
					break;
				case WifimanagerModule.EAP:
					Log.d(LCAT, "Security EAP");
					WifiEnterpriseConfig enterpriseConfig = new WifiEnterpriseConfig();
					wc.allowedKeyManagement.set(KeyMgmt.WPA_EAP);
					wc.allowedKeyManagement.set(KeyMgmt.IEEE8021X);
					if (name != null)
						enterpriseConfig.setIdentity(name);
					if (password != null)
						enterpriseConfig.setPassword(password);
					enterpriseConfig
							.setEapMethod(WifiEnterpriseConfig.Eap.PEAP);
					wc.enterpriseConfig = enterpriseConfig;
					break;
				case WifimanagerModule.OPEN:
					wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
					break;
				case WifimanagerModule.PSK:
					if (password.length() < 8) {
						Log.e(LCAT, "PSK too short, min 8 characters");
						return;
					}
					Log.d(LCAT,
							"found *security* PSK, setting of preSharedKey to password "
									+ password);
					wc.preSharedKey = String.format("\"%s\"", password);
					wc.priority = priority;
					if (ssid != null) {
						if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
							wc.SSID = ssid;
						} else {
							wc.SSID = String.format("\"%s\"", ssid);
						}
					}
					wc.hiddenSSID = true;
					wc.status = WifiConfiguration.Status.ENABLED;
					wc.allowedGroupCiphers
							.set(WifiConfiguration.GroupCipher.TKIP);
					wc.allowedGroupCiphers
							.set(WifiConfiguration.GroupCipher.CCMP);
					wc.allowedKeyManagement
							.set(WifiConfiguration.KeyMgmt.WPA_PSK);
					wc.allowedPairwiseCiphers
							.set(WifiConfiguration.PairwiseCipher.TKIP);
					wc.allowedPairwiseCiphers
							.set(WifiConfiguration.PairwiseCipher.CCMP);
					wc.allowedProtocols.set(WifiConfiguration.Protocol.RSN);

					WifiManager wifi = (WifiManager) ctx
							.getSystemService(Context.WIFI_SERVICE);
					wifi.setWifiEnabled(true);
					int res = 0;
					if (wifi.isWifiEnabled())
						res = wifi.addNetwork(wc);
					else
						Log.e(LCAT,
								"Cannot add network because wifi is disabled");
					Log.d(LCAT, "id=" + res + "\n\n");
					break;
				default:
					Log.w(LCAT, "no matching BSSID in results found");

				}
			}
		}
	}
}// http://stackoverflow.com/questions/32120710/how-to-connect-to-wifi-with-a-specific-bssid-android

