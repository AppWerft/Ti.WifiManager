/**
 * This file was auto-generated by the Titanium Module SDK helper for Android


 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.wifimanager;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;

import android.content.Context;
import android.content.IntentFilter;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.net.wifi.WpsInfo;

@Kroll.module(name = "Wifimanager", id = "ti.wifimanager")
public class WifimanagerModule extends KrollModule {
	public static final String LCAT = "TiWifi";

	@Kroll.constant
	final static int CONFIGS_TATUS_CURRENT = WifiConfiguration.Status.CURRENT;
	@Kroll.constant
	final static int CONFIG_STATUS_DISABLED = WifiConfiguration.Status.DISABLED;
	@Kroll.constant
	final static int CONFIG_STATUS_ENABLED = WifiConfiguration.Status.ENABLED;

	@Kroll.constant
	final static int WPS_DISPLAY = WpsInfo.DISPLAY;
	@Kroll.constant
	final static int WPS_INVALID = WpsInfo.INVALID;
	@Kroll.constant
	final static int WPS_KEYPAD = WpsInfo.KEYPAD;
	@Kroll.constant
	final static int WPS_LABEL = WpsInfo.LABEL;
	@Kroll.constant
	final static int WPS_PBC = WpsInfo.PBC;

	@Kroll.constant
	public static final String ACTION_PICK_WIFI_NETWORK = WifiManager.ACTION_PICK_WIFI_NETWORK;
	@Kroll.constant
	public static final String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE = WifiManager.ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE;
	@Kroll.constant
	public static final String NETWORK_IDS_CHANGED_ACTION = WifiManager.NETWORK_IDS_CHANGED_ACTION;
	@Kroll.constant
	public static final String NETWORK_STATE_CHANGED_ACTION = WifiManager.NETWORK_STATE_CHANGED_ACTION;

	@Kroll.constant
	public static final String RSSI_CHANGED_ACTION = WifiManager.RSSI_CHANGED_ACTION;
	@Kroll.constant
	public static final String SCAN_RESULTS_AVAILABLE_ACTION = WifiManager.SCAN_RESULTS_AVAILABLE_ACTION;
	@Kroll.constant
	public static final String SUPPLICANT_CONNECTION_CHANGE_ACTION = WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION;
	@Kroll.constant
	public static final String SUPPLICANT_STATE_CHANGED_ACTION = WifiManager.SUPPLICANT_STATE_CHANGED_ACTION;
	@Kroll.constant
	public static final int WIFI_MODE_FULL = WifiManager.WIFI_MODE_FULL;
	@Kroll.constant
	public static final int WIFI_MODE_FULL_HIGH_PERF = WifiManager.WIFI_MODE_FULL_HIGH_PERF;
	@Kroll.constant
	public static final int WIFI_MODE_SCAN_ONLY = WifiManager.WIFI_MODE_SCAN_ONLY;
	@Kroll.constant
	public static final String WIFI_STATE_CHANGED_ACTION = WifiManager.WIFI_STATE_CHANGED_ACTION;
	@Kroll.constant
	public static final int WIFI_STATE_DISABLED = WifiManager.WIFI_STATE_DISABLED;
	@Kroll.constant
	public static final int WIFI_STATE_DISABLING = WifiManager.WIFI_STATE_DISABLING;

	@Kroll.constant
	public static final int WIFI_STATE_ENABLED = WifiManager.WIFI_STATE_ENABLED;
	@Kroll.constant
	public static final int WIFI_STATE_ENABLING = WifiManager.WIFI_STATE_ENABLING;
	@Kroll.constant
	public static final int WIFI_STATE_UNKNOWN = WifiManager.WIFI_STATE_UNKNOWN;
	@Kroll.constant
	public static final int WPS_AUTH_FAILURE = WifiManager.WPS_AUTH_FAILURE;
	@Kroll.constant
	public static final int WPS_OVERLAP_ERROR = WifiManager.WPS_OVERLAP_ERROR;
	@Kroll.constant
	public static final int WPS_TIMED_OUT = WifiManager.WPS_TIMED_OUT;
	@Kroll.constant
	public static final int WPS_TKIP_ONLY_PROHIBITED = WifiManager.WPS_TKIP_ONLY_PROHIBITED;
	@Kroll.constant
	public static final int WPS_WEP_PROHIBITED = WifiManager.WPS_WEP_PROHIBITED;

	// Constants used for different security types
	public static final String PSK = "PSK";
	public static final String WEP = "WEP";
	public static final String EAP = "EAP";
	public static final String OPEN = "Open";
	public static final String[] EAP_METHOD = { "PEAP", "TLS", "TTLS" };
	public static final String CHANGE = "change";

	private List<KrollDict> scannednetworklist;
	private List<KrollDict> configurednetworklist;

	/* instance variables */
	public static WifiManager wifiManager;
	private WifiScanEventListener wifiScanEventListener;
	private boolean disableWifiOnPause;

	public static WifiManager getWifiManager() {
		return wifiManager;
	}

	public WifimanagerModule() {
		super();
		initWifiManager();
		WifiChangeEventListener.proxy = this;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
	}

	@Kroll.method
	public static KrollDict getNetworkByBSSID(String BSSID) {
		KrollDict kd = new KrollDict();
		for (android.net.wifi.ScanResult res : wifiManager.getScanResults()) {
			if (res.BSSID.equals(BSSID))
				return Utils.ScanResultToKrollDict(res);
		}
		return null;
	}

	@Kroll.method
	public Object[] getConfiguredNetworks() {
		configurednetworklist = new ArrayList<KrollDict>();
		List<WifiConfiguration> list = wifiManager.getConfiguredNetworks();
		for (WifiConfiguration wifiConfiguration : list) {
			KrollDict ap = new KrollDict();
			final String ssid = Pattern.compile("\"")
					.matcher(wifiConfiguration.SSID).replaceAll("");
			ap.put("ssid", ssid);
			ap.put("bssid", wifiConfiguration.BSSID);
			ap.put("status", wifiConfiguration.status);
			ap.put("hidden", wifiConfiguration.hiddenSSID);
			ap.put("id", wifiConfiguration.networkId);
			ap.put("prio", wifiConfiguration.priority);
			configurednetworklist.add(ap);
		}
		return configurednetworklist.toArray();
	}

	@Kroll.method
	public static KrollDict isLocationServiceEnabled() {
		return Utils.isLocationServiceEnabled();

	}

	@Kroll.method
	public KrollDict getCurrentConnection() {
		WifiInfo wi = wifiManager.getConnectionInfo();
		KrollDict kd = new KrollDict();
		kd.put("ssid", wi.getSSID());
		kd.put("bssid", wi.getBSSID());
		kd.put("IpAddress", wi.getIpAddress());
		kd.put("linkSpeed", wi.getLinkSpeed());
		kd.put("macAddress", wi.getMacAddress());
		kd.put("Rssi", wi.getRssi());
		return kd;
	}

	@Kroll.method
	public boolean isWifiEnabled() {
		return wifiManager.isWifiEnabled();
	}

	@Kroll.method
	public boolean is5GHzBandSupported() {
		return wifiManager.is5GHzBandSupported();
	}

	@Kroll.method
	public boolean isDeviceToApRttSupported() {
		return wifiManager.isDeviceToApRttSupported();
	}

	@Kroll.method
	public boolean isEnhancedPowerReportingSupported() {
		return wifiManager.isEnhancedPowerReportingSupported();
	}

	@Kroll.method
	public boolean isP2pSupported() {
		return wifiManager.isP2pSupported();
	}

	@Kroll.method
	public boolean isPreferredNetworkOffloadSupported() {
		return wifiManager.isPreferredNetworkOffloadSupported();
	}

	@Kroll.method
	public boolean isTdlsSupported() {
		return wifiManager.isTdlsSupported();
	}

	@Kroll.method
	public void enableWifi() {
		wifiManager.setWifiEnabled(true);
	}

	@Kroll.method
	public void disableWifi() {
		wifiManager.setWifiEnabled(false);
	}

	@Kroll.method
	public boolean setWifiEnabled(boolean flag) {
		return wifiManager.setWifiEnabled(flag);
	}

	public KrollFunction onScanComplete;

	@Kroll.method
	public boolean startWifiScan(KrollDict opts) {
		if (opts.containsKeyAndNotNull("complete")) {
			Object o = opts.get("complete");
			if (o instanceof KrollFunction) {
				onScanComplete = (KrollFunction) o;
			} else {
				Log.e(LCAT, "startWifiScan.complete is not function");
				return false;
			}
		} else {
			Log.e(LCAT, "startWifiScan.complete is missing");
			return false;
		}
		Context ctx = TiApplication.getInstance().getApplicationContext();
		IntentFilter scanIntent = new IntentFilter();
		scanIntent.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
		wifiScanEventListener = new WifiScanEventListener(ctx, onScanComplete,
				getKrollObject());
		Log.d(LCAT,
				"=========================Start Wifi scanner===========================");
		ctx.registerReceiver(
				wifiScanEventListener.getBroadcastReceiverInstance(),
				scanIntent);
		if (!wifiManager.isWifiEnabled()
				&& wifiManager.getWifiState() != WifiManager.WIFI_STATE_ENABLING) {
			Log.d(LCAT, "Wifi was disabled, try to enable");
			disableWifiOnPause = true;
			wifiManager.setWifiEnabled(true);
			return wifiManager.startScan();
		}
		wifiManager.startScan();
		return false;
	}

	@Kroll.method
	public void cancelWifiScan() {
		Context ctx = TiApplication.getInstance().getApplicationContext();
		ctx.unregisterReceiver(wifiScanEventListener.getmWifiEventReceiver());
		wifiScanEventListener.setmWifiEventReceiver(null);
	}

	@Kroll.method
	public boolean reconnect() {
		return wifiManager.reconnect();
	}

	@Kroll.method
	public boolean disconnect() {
		return wifiManager.disconnect();
	}

	@Kroll.method
	public boolean isScanAlwaysAvailable() {
		return wifiManager.isScanAlwaysAvailable();
	}

	@Kroll.method
	public int addNetwork(Object o) {
		Log.d(LCAT,
				"addNetwork, test which input (KrollDict or ScanResultProxy)");
		if (o instanceof KrollDict) {
			Log.d(LCAT, "KrollDict => direct call");
			return WifiConfigurationHandler.addNetwork((KrollDict) o);
		} else if (o instanceof ScanResultProxy) {
			Log.d(LCAT, "ScanResultProxy => extracting data from proxy");
			ScanResultProxy proxy = ((ScanResultProxy) o);
			ScanResult scanResult = proxy.getScanResult();
			KrollDict opts = new KrollDict();
			opts.put("ssid", scanResult.SSID);
			opts.put("bssid", scanResult.BSSID);
			opts.put("password", proxy.getPassword());
			return WifiConfigurationHandler.addNetwork(opts);
		}
		return -1;

	}

	@Kroll.method
	public boolean removeNetwork(int netId) {
		return wifiManager.removeNetwork(netId);
	}

	@Kroll.method
	public int removeAllNetworks() {
		int count = 0;
		for (WifiConfiguration config : wifiManager.getConfiguredNetworks()) {
			wifiManager.removeNetwork(config.networkId);
			count++;
		}
		return count;
	}

	@Kroll.method
	public boolean pingSupplicant() {
		return wifiManager.pingSupplicant();
	}

	@Kroll.method
	public int addConfiguration(KrollDict opts) {
		return addNetwork(opts);
	}

	@Kroll.method
	public boolean saveConfiguration() {
		return wifiManager.saveConfiguration();
	}

	@Kroll.method
	public int updateNetwork(WifiConfigurationHandler proxy) {
		return 0;
		// return wifiManager.updateNetwork(proxy.getConfiguration());

	}

	@Kroll.method
	public int calculateSignalLevel(int rssi, int numLevels) {
		return wifiManager.calculateSignalLevel(rssi, numLevels);

	}

	@Kroll.method
	public void enableNetwork(KrollDict opts) {

		int netId = 0;
		if (opts.containsKeyAndNotNull("netId")) {
			netId = opts.getInt("netId");
		}
		if (opts.containsKeyAndNotNull(CHANGE)) {
			Object o = opts.get(CHANGE);
			if (o instanceof KrollFunction) {
				WifiChangeEventListener.onChange = (KrollFunction) o;
			}
		}
		List<WifiConfiguration> configuredList = wifiManager
				.getConfiguredNetworks();
		for (WifiConfiguration wifiConfiguration : configuredList) {
			if (wifiConfiguration.networkId == netId) {
				wifiManager.disconnect();
				wifiManager.enableNetwork(wifiConfiguration.networkId, true);
				wifiManager.reconnect();
				break;
			}
		}
	}

	@Kroll.method
	public void disableNetwork(int networkId) {
		List<WifiConfiguration> configuredList = wifiManager
				.getConfiguredNetworks();
		for (WifiConfiguration wifiConfiguration : configuredList) {
			if (wifiConfiguration.networkId == networkId) {
				wifiManager.disableNetwork(wifiConfiguration.networkId);
				break;
			}
		}
	}

	private static void initWifiManager() {
		wifiManager = (WifiManager) TiApplication.getInstance()
				.getSystemService(Context.WIFI_SERVICE);

	}

	/* WPS stuff */

	private KrollFunction onWPSConnected;
	private KrollFunction onWPSStarted;

	private KrollFunction onWPSError;

	private String ONCONNECTED = "onconnected";

	private WifiManager.WpsCallback wpsCallback = new WifiManager.WpsCallback() {
		@Override
		public void onStarted(String pin) {
			if (onWPSStarted != null) {
				KrollDict kd = new KrollDict();
				kd.put("pin", pin);
				onWPSStarted.call(getKrollObject(), kd);
			}
		}

		@Override
		public void onSucceeded() {
			if (onWPSConnected != null)
				onWPSConnected.call(getKrollObject(), new KrollDict());
		}

		@Override
		public void onFailed(int reason) {
			String errorMessage;
			switch (reason) {
			case WifiManager.WPS_OVERLAP_ERROR:
				errorMessage = "WPS_OVERLAP_ERROR";
				break;
			case WifiManager.WPS_WEP_PROHIBITED:
				errorMessage = "WPS_WEP_PROHIBITED";
				break;
			case WifiManager.WPS_TKIP_ONLY_PROHIBITED:
				errorMessage = "WPS_WEP_PROHIBITED";
				break;
			/*
			 * case WifiManager.IN_PROGRESS: mWifiManager.cancelWps(null);
			 * startWps(); return;
			 */
			case WifiManager.WPS_TIMED_OUT:
				errorMessage = "WPS_TIMED_OUT";
				// startWps();
				return;
			default:
				errorMessage = "Generic error.";
				break;
			}
			if (onWPSError != null) {
				KrollDict kd = new KrollDict();
				kd.put("error", errorMessage);
				kd.put("code", reason);
				onWPSConnected.call(getKrollObject(), kd);
			}
		}
	};

	@Kroll.method
	public void startWPS(@Kroll.argument(optional = true) KrollDict opts) {
		int setup = 0;
		if (opts != null) {
			if (opts.containsKeyAndNotNull("setup")) {
				setup = opts.getInt("setup");
			}
			if (opts.containsKeyAndNotNull(ONCONNECTED)) {
				Object o = opts.get(ONCONNECTED);
				if (o instanceof KrollFunction) {
					onWPSConnected = (KrollFunction) o;
				}
			}
			if (opts.containsKeyAndNotNull("onstarted")) {
				Object o = opts.get("onstarted");
				if (o instanceof KrollFunction) {
					onWPSStarted = (KrollFunction) o;
				}
			}
			if (opts.containsKeyAndNotNull(TiC.PROPERTY_ONERROR)) {
				Object o = opts.get(TiC.PROPERTY_ONERROR);
				if (o instanceof KrollFunction) {
					onWPSError = (KrollFunction) o;
				}
			}
		}
		WpsInfo wpsInfo = new WpsInfo();
		wpsInfo.setup = setup;
		wifiManager.startWps(wpsInfo, wpsCallback);
	}

	@Kroll.method
	public void cancel() {
		wifiManager.cancelWps(wpsCallback);
	}

	// Helpers:
	@Kroll.method
	public static boolean isValidWEPKey(String wepKey) {
		return WEPKey.isValid(wepKey);

	}

	@Kroll.method
	public static boolean isValidMac(String mac) {
		Pattern p = Pattern.compile("^([a-fA-F0-9][:-]){5}[a-fA-F0-9][:-]$");
		Matcher m = p.matcher(mac);
		return m.find();
	}

	@Kroll.method
	public static boolean isValidBSSID(String mac) {
		return isValidMac(mac);
	}

}

// http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android-apps/2.0_r1/com/android/settings/wifi/AccessPointState.java#AccessPointState.getScanResultSecurity%28android.net.wifi.ScanResult%29